--joins

CREATE TABLE EMP
       (EMPNO NUMERIC(4) NOT NULL,
        ENAME VARCHAR(10),
        JOB VARCHAR(9),
        MGR NUMERIC(4),
        HIREDATE DATE,
        SAL NUMERIC(7, 2),
        COMM NUMERIC(7, 2),
        DEPTNO NUMERIC(2));

INSERT INTO EMP VALUES
        (7369, 'SMITH',  'CLERK',     7902,
        '17-DEC-1980',  800, NULL, 20);
INSERT INTO EMP VALUES
        (7499, 'ALLEN',  'SALESMAN',  7698,
        '20-FEB-1981', 1600,  300, 30);
INSERT INTO EMP VALUES
        (7521, 'WARD',   'SALESMAN',  7698,
        '22-FEB-1981', 1250,  500, 30);
INSERT INTO EMP VALUES
        (7566, 'JONES',  'MANAGER',   7839,
        '2-APR-1981',  2975, NULL, 20);
INSERT INTO EMP VALUES
        (7654, 'MARTIN', 'SALESMAN',  7698,
        '28-SEP-1981', 1250, 1400, 30);
INSERT INTO EMP VALUES
        (7698, 'BLAKE',  'MANAGER',   7839,
        '1-MAY-1981',  2850, NULL, 30);
INSERT INTO EMP VALUES
        (7782, 'CLARK',  'MANAGER',   7839,
        '9-JUN-1981',  2450, NULL, 10);
INSERT INTO EMP VALUES
        (7788, 'SCOTT',  'ANALYST',   7566,
        '09-DEC-1982', 3000, NULL, 20);
INSERT INTO EMP VALUES
        (7839, 'KING',   'PRESIDENT', NULL,
        '17-NOV-1981', 5000, NULL, 10);
INSERT INTO EMP VALUES
        (7844, 'TURNER', 'SALESMAN',  7698,
        '8-SEP-1981',  1500,    0, 30);
INSERT INTO EMP VALUES
        (7876, 'ADAMS',  'CLERK',     7788,
        '12-JAN-1983', 1100, NULL, 20);
INSERT INTO EMP VALUES
        (7900, 'JAMES',  'CLERK',     7698,
        '3-DEC-1981',   950, NULL, 30);
INSERT INTO EMP VALUES
        (7902, 'FORD',   'ANALYST',   7566,
        '3-DEC-1981',  3000, NULL, 20);
INSERT INTO EMP VALUES
        (7934, 'MILLER', 'CLERK',     7782,
        '23-JAN-1982', 1300, NULL, 10);

SELECT * FROM EMP

CREATE TABLE DEPT
       (DEPTNO NUMERIC(2),
        DNAME VARCHAR(14),
        LOC VARCHAR(13) );

INSERT INTO DEPT VALUES (10, 'ACCOUNTING', 'NEW YORK');
INSERT INTO DEPT VALUES (20, 'RESEARCH',   'DALLAS');
INSERT INTO DEPT VALUES (30, 'SALES',      'CHICAGO');
INSERT INTO DEPT VALUES (40, 'OPERATIONS', 'BOSTON');

SELECT * FROM DEPT

--INNER JOIN OR EQUIJOIN OR JOIN
SELECT E.ENAME,E.EMPNO,E.JOB,E.SAL,E.MGR,E.DEPTNO,D.DNAME , D.LOC FROM EMP E JOIN DEPT D ON D.DEPTNO = E.DEPTNO ORDER BY E.DEPTNO

SELECT E.ENAME,E.EMPNO,E.JOB,E.SAL,E.MGR,E.DEPTNO,D.DNAME , D.LOC FROM DEPT D JOIN EMP E  ON D.DEPTNO = E.DEPTNO ORDER BY E.DEPTNO

SELECT * FROM EMP E INNER JOIN DEPT D ON E.DEPTNO = D.DEPTNO ORDER BY D.DEPTNO

--LEFT JOIN OR LEFT OUTER JOIN
DUPICATE RECORDS ARE POSSIBLE IN LEFT JOIN

SELECT E.*,D.* FROM EMP E LEFT JOIN DEPT D ON D.DEPTNO=E.DEPTNO ORDER BY E.DEPTNO

--RIGHT JOIN OR RIGHT OUTER JOIN

SELECT E.* FROM EMP E RIGHT JOIN DEPT D ON E.DEPTNO = D.DEPTNO ORDER BY E.DEPTNO
SELECT * FROM EMP
SELECT * FROM DEPT

--FULL JOIN

SELECT E.*,D.* FROM EMP E FULL OUTER JOIN DEPT D ON E.DEPTNO=D.DEPTNO ORDER BY E.DEPTNO , D.DEPTNO

--ORDER
SELECT * FROM PEOPLE1
SELECT * FROM SALESORDER1
SELECT * FROM  RETURNS1

SP_HELP 'SALESORDER1'
SP_HELP RETURNS1

SELECT SO.CUSTOMERNAME,SO.ORDERID,SO.CUSTOMERID,SO.CITY,SO.COUNTRY,RE.ORDERID FROM SALESORDER1 SO INNER JOIN RETURNS1 ON SO.ORDERID = RE.ORDERID


--SELF JOIN
SELECT * FROM EMP
SELECT * FROM DEPT

SELECT E1.ENAME,E2.ENAME FROM EMP E1 INNER JOIN EMP E2 ON E1.MGR = E2.EMPNO

--CROSS JOIN 
JUST JOIN THE TWO TABLES

SELECT * FROM EMP,DEPT

--CARTESIAN JOIN 

SELECT E1.ENAME,E1.SAL FROM EMP E1 WHERE E1.SAL >= 5000

--OPERATORS
--UNION ALL

SELECT * FROM EMP WHERE DEPTNO=10 UNION SELECT * FROM EMP WHERE JOB='CLERK'

--EXCEPT (RECORDS FIRST QUERY NOT IN THE SECOND QUERY)
SELECT * FROM EMP WHERE DEPTNO=20 EXCEPT SELECT * FROM EMP WHERE JOB='MANAGER'

--INTERSECT - COMMOND RECORDS

SELECT * FROM EMP WHERE DEPTNO = 30 INTERSECT SELECT * FROM EMP WHERE JOB ='CLERK'

--IIF FUNCTION (returns a value if a condition is TRUE, or another value if a condition is FALSE)
SELECT E.*,IIF(DEPTNO=10,'HR','OTHERS') AS IIF01 FROM EMP E ORDER BY DEPTNO

SELECT IIF(DEPTNO=10,'HR','OTHERS') AS IFF01 ,IIF(DEPTNO=20,'MANAGER','OTHERS') AS IFF02 FROM EMP E ORDER BY DEPTNO

--CASE STATEMENT

SELECT E.*,(CASE WHEN DEPTNO=10 THEN 'HR' WHEN DEPTNO=20 THEN ' MANAGER' WHEN DEPTNO=30 THEN 'ANALYST' ELSE 'OTHERS' END) AS 'CASE01' FROM EMP E ORDER BY DEPTNO

--FUNCTIONS
USER DEFINED FUNCTION, BUILD-IN FUNCTION AND CREATE OUR OWN FUNCTIONS

--AGGREGRATE FUNCTION
SELECT SUM(SAL) AS 'TOTAL SAL',AVG(SAL) AS 'AVERAGE SAL',MAX(SAL) AS 'MAX SAL' ,COUNT(SAL) AS 'COUNTSAL' FROM EMP

SELECT HIREDATE,
DATENAME(YEAR,HIREDATE) AS YEAR,
DATENAME(MONTH,HIREDATE) AS MONTH,
DATENAME(DAY,HIREDATE) AS DAY,
DATENAME(WEEKDAY,HIREDATE) AS WEEKDAY,
DATENAME(WEEK,HIREDATE) AS WEEKNUM FROM EMP

--DATE DIFFERENCE
SELECT HIREDATE,
DATEDIFF(YEAR,HIREDATE,GETDATE()) AS 'YEARDIFF',
DATEDIFF(MONTH,HIREDATE,GETDATE()) AS 'MONTHDIFF' FROM EMP

--ADD A DATE

SELECT HIREDATE,
DATEADD(YEAR,1,HIREDATE) AS 'ADD YEAR' FROM EMP

--CONVERT VARCHAR
SELECT HIREDATE , ISDATE(CAST(HIREDATE AS NVARCHAR(10))) FROM EMP

--STRING FUNCTIONS
SELECT ENAME,
LOWER(ENAME) AS 'LOWERCASE',
UPPER(ENAME) AS 'UPPERCASE',
REVERSE(ENAME) AS 'REVERSECASE',
SUBSTRING(ENAME,1,3) AS 'SUBSTRINGCASE',
LTRIM(ENAME) AS 'LTRIM',
RTRIM(ENAME) AS 'RTRIM' FROM EMP   --TRIM MEANS ELIMINATE THE SPACES

--CHARINDEX (SEARCH FOR SPECIFIC ALPHABETICS)
SELECT CHARINDEX('C',ENAME) AS CHARINDEX FROM EMP

--REPLACE
SELECT REPLACE(ENAME,'E','SQL') AS REPLACENAME FROM EMP

--CONCAT (COMBINING TWO THINS)
SELECT CONCAT(ENAME,'SQL') AS 'CONCATCOMBINE' FROM EMP

--STRINGSPLIT
SELECT * FROM STRING_SPLIT('THIS IS A SQL',' ')

--DIFFERENCE (TWO FUNCTION)
SELECT DIFFERENCE(LOWER (ENAME),UPPER (ENAME)) FROM EMP

--SYSTEM FUNCTION
--CAST FUNCTION IS USED TO COMBINE TO COMCADENATE BOTH TWO DIFFERENT DATA TYPES]
SELECT HIREDATE,CAST(HIREDATE AS VARCHAR(10))+' '+ENAME FROM EMP

--TRYCAST IS USED TO CONVERTS A VALUE TO SPECIFIC DATA TYPES

SELECT HIREDATE,
CAST(HIREDATE AS VARCHAR(10))+' '+ENAME,
TRY_CAST(ENAME AS NVARCHAR(20)) FROM EMP

--PARSE IS USED TO CONVERT INTO DATE FORMAT
SELECT PARSE('11 MAY 2002' AS DATETIME)

--WINDOWS FUNCTION

--DELETE QUERY
DELETE FROM EMP WHERE HIREDATE IS NULL
SELECT * FROM EMP

--RANK FUNCTION
SELECT SAL,DENSE_RANK()OVER(ORDER BY SAL DESC) FROM EMP

--PARTIONING COLUMN
SELECT DEPTNO,SAL,DENSE_RANK()OVER(PARTITION BY DEPTNO ORDER BY SAL ASC) FROM EMP

--ROW NUMBER
SELECT SAL,ROW_NUMBER()OVER(ORDER BY SAL ASC) FROM EMP

--PERCENT RANK (PERCENTAGE VALUES OR PERCENTILE CALCULATION)
SELECT SAL,PERCENT_RANK()OVER(ORDER BY SAL DESC) FROM EMP

--NTILE - DIVIDED HOW MANY GROUPS
SELECT SAL,NTILE(4)OVER(ORDER BY SAL DESC) FROM EMP

--LEAD AND LAG IS USED TO COMPARE THAN VS NOW OR LEAD IS CURRENT NUMBER AND LAG IS BEFORE OR AFTER NUMBER
SELECT SAL,LEAD(SAL,1)OVER(ORDER BY SAL ASC) AS 'LEAD',LAG(SAL,1)OVER(ORDER BY SAL ASC) AS 'LAG' FROM EMP

--ISNUMERIC AND ISNULL
SELECT COMM ,ISNUMERIC(COMM) AS 'ISNUMERIC',ISNULL(COMM,100) AS 'ISNULL' FROM EMP

--TEMPORARY TABLES
CREATE TABLE TEMP(ENAME VARCHAR(10),EID INT)
INSERT INTO TEMP VALUES('SAN',123),('SUP',456)
SELECT * FROM TEMP

DROP TABLE TEMP

--GROUP BY s used to group rows that have the same values in specified columns into aggregated data, like sums, counts, averages, etc.
SELECT DEPTNO,SUM(SAL) AS 'SUM SAL',AVG(SAL) AS 'AVGSAL' FROM EMP GROUP BY DEPTNO

--MULTIPLE GROUP BY
SELECT DEPTNO,JOB,SUM(SAL) AS 'SUM SAL',AVG(SAL) AS 'AVGSAL' FROM EMP GROUP BY DEPTNO,JOB

--CUBE FUNCTION PERFORM aggregation on the dimensions given in the CUBE().
SELECT DEPTNO,JOB,SUM(SAL) AS 'SUM SAL',AVG(SAL) AS 'AVGSAL' FROM EMP GROUP BY CUBE(DEPTNO,JOB) ORDER BY DEPTNO,JOB

--UPDATE WITH JOIN
SELECT T1.ENAME,T1.JOB,T1.EMPNO INTO EMP01 FROM (SELECT * FROM EMP) AS T1
SELECT * FROM EMP01

ALTER TABLE EMP01 ADD SAL NUMERIC(10,2)
UPDATE EMP01 SET EMP01.SAL = EMP.SAL FROM EMP01 INNER JOIN EMP ON EMP01.EMPNO =EMP.EMPNO WHERE DEPTNO=10
UPDATE EMP01 SET EMP01.SAL = EMP.SAL FROM EMP01 INNER JOIN EMP ON EMP01.EMPNO =EMP.EMPNO WHERE DEPTNO=20

--STORED PROCEDURE is a prepared SQL code that you can save, so the code can be reused over and over again.
CREATE PROCEDURE PROC01 AS SELECT * FROM EMP
EXEC PROC01

CREATE PROCEDURE PROC02
AS
BEGIN
SELECT * FROM EMP WHERE DEPTNO=10
END

EXEC PROC02

CREATE PROCEDURE PROC03(@DEPTNO INT)
AS 
BEGIN
IF EXISTS (SELECT * FROM EMP WHERE DEPTNO = @DEPTNO)
PRINT 'RECORD AVAILABLE'
ELSE
PRINT 'NO RECORDS'
END

CREATE PROCEDURE PROC04
AS 
BEGIN
IF EXISTS (SELECT * FROM EMP WHERE DEPTNO = 20)
PRINT 'RECORD AVAILABLE'
ELSE
PRINT 'NO RECORDS'
END
EXEC PROC04

